using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityStandardAssets.Characters.FirstPerson;
using UnityEngine.UI;

public class Gun_AK47 : MonoBehaviour
{
    [Header("Name:")]
    public string Name = "AK47";

    [Header("Description:")]
    public string Description;

    [Header("Basics")]
    public float Damage = 10f;
    public float range = 50f;
    public float clip = 30f;
    public float reserve = 120f;
    public float fireRate = 15f;

    [Header("Player")]
    public FirstPersonController PlayerController;
    public Rigidbody rigid;
    public GameObject fpscam;

    [Header("Animations")]
    public Animator anim_controller;

    [Header("SFX")]
    public AudioSource audio;
    public AudioClip[] clips;
    public GameObject blood;
    public ParticleSystem flash;
    public GameObject Light;

    [Header("Weapon Sway")]
    //Enables weapon sway
    [Tooltip("Toggle weapon sway.")]
    public bool weaponSway;

    [Header("UI")]
    public Text clipui;
    public Text reserveui;

    private float swayAmount = 0.02f;
    private float maxSwayAmount = 0.06f;
    private float swaySmoothValue = 10.0f;

    private Vector3 initialSwayPosition;
    private float nextTimeToFire = 1f;
    bool CanShoot;

    private bool CanReload;

    [HideInInspector]
    public bool isWalking;

    private void Start()
    {
        CanShoot = true;
    }

    private void Update()
    {

        if (Input.GetKey(KeyCode.W) && isWalking == false ||
             Input.GetKey(KeyCode.A) && isWalking == false ||
             Input.GetKey(KeyCode.S) && isWalking == false ||
             Input.GetKey(KeyCode.D) && isWalking == false)
        {
            Debug.Log("Player is walking");
            anim_controller.SetBool("Walk", true);
        }
        else
        {
            anim_controller.SetBool("Walk", false);
        }
        if (PlayerController.GetComponent<FirstPersonController>().m_IsWalking == false)
        {
            anim_controller.SetBool("Run", true);
        } else
        {
            anim_controller.SetBool("Run", false);
        }

        if (Input.GetButton("Fire1") && Time.time >= nextTimeToFire && CanShoot == true)
        {
            nextTimeToFire = Time.time + 1f / fireRate;
            StartCoroutine("Shoot");

            if (clip <= 0f)
            {
                CanShoot = false;
            }

        }

        reserveui.text = reserve.ToString();
        clipui.text = clip.ToString();

        if(Input.GetKeyDown(KeyCode.R) && CanReload == true) 
        {
            StartCoroutine("Reload");
        }

        if (clip == 30f)
        {
            CanReload = false;
        } else
        {
            CanReload = true;
        }

        }

    private void LateUpdate()
    {

        //Weapon sway
        if (weaponSway == true)
        {
            float movementX = -Input.GetAxis("Mouse X") * swayAmount;
            float movementY = -Input.GetAxis("Mouse Y") * swayAmount;
            //Clamp movement to min and max values
            movementX = Mathf.Clamp
                (movementX, -maxSwayAmount, maxSwayAmount);
            movementY = Mathf.Clamp
                (movementY, -maxSwayAmount, maxSwayAmount);
            //Lerp local pos
            Vector3 finalSwayPosition = new Vector3
                (movementX, movementY, 0);
            transform.localPosition = Vector3.Lerp
                (transform.localPosition, finalSwayPosition +
                    initialSwayPosition, Time.deltaTime * swaySmoothValue);
        }
    }

    public IEnumerator Reload ()
    {
        reserve -= 30f;
        clip += 30f;
        audio.clip = clips[1];
        audio.Play();
        anim_controller.Play("Reload Out Of Ammo");
        yield return new WaitForSeconds(3f);
        CanShoot = true;

        if (clip != 0f && reserve != 0f)
        {
            float difference = 30f - clip;
            reserve = reserve - difference;
            clip = clip + difference;
        }

    }

    public IEnumerator Shoot ()
    {
        clip -= 1f;
        Debug.Log("Shot the thing");
        anim_controller.Play("Fire", 0, 0f);
        audio.clip = clips[0];
        audio.Play();
        flash.Play();
        Light.SetActive(true);
        yield return new WaitForSeconds(0.05f);
        Light.SetActive(false);

        RaycastHit hit;
        if (Physics.Raycast(fpscam.transform.position, fpscam.transform.forward, out hit, range))
        {
            Zombie_AI enemy = hit.transform.gameObject.GetComponent<Zombie_AI>();

            if (enemy != null)
            {
                GameObject impactGo = Instantiate(blood, hit.point, PlayerController.transform.rotation);
                enemy.TakeDamage(Damage);
                Destroy(impactGo, 1f);
            }

            if (hit.rigidbody != null)
            {
                hit.rigidbody.AddForce(-hit.normal * 300f);
            }
        }
    }
}


